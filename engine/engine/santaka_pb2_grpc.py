# flake8: noqa
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import engine.santaka_pb2 as santaka__pb2


class PingerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
            "/santaka.Pinger/Ping",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class PingerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_PingerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Ping": grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "santaka.Pinger", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Pinger(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/santaka.Pinger/Ping",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class DifferenceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateStockDifference = channel.unary_unary(
            "/santaka.DifferenceService/CalculateStockDifference",
            request_serializer=santaka__pb2.DifferenceRequest.SerializeToString,
            response_deserializer=santaka__pb2.DifferenceResponse.FromString,
        )
        self.CalculateBondDifference = channel.unary_unary(
            "/santaka.DifferenceService/CalculateBondDifference",
            request_serializer=santaka__pb2.DifferenceRequest.SerializeToString,
            response_deserializer=santaka__pb2.DifferenceResponse.FromString,
        )


class DifferenceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CalculateStockDifference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CalculateBondDifference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DifferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CalculateStockDifference": grpc.unary_unary_rpc_method_handler(
            servicer.CalculateStockDifference,
            request_deserializer=santaka__pb2.DifferenceRequest.FromString,
            response_serializer=santaka__pb2.DifferenceResponse.SerializeToString,
        ),
        "CalculateBondDifference": grpc.unary_unary_rpc_method_handler(
            servicer.CalculateBondDifference,
            request_deserializer=santaka__pb2.DifferenceRequest.FromString,
            response_serializer=santaka__pb2.DifferenceResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "santaka.DifferenceService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class DifferenceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CalculateStockDifference(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/santaka.DifferenceService/CalculateStockDifference",
            santaka__pb2.DifferenceRequest.SerializeToString,
            santaka__pb2.DifferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CalculateBondDifference(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/santaka.DifferenceService/CalculateBondDifference",
            santaka__pb2.DifferenceRequest.SerializeToString,
            santaka__pb2.DifferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class AlertServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckPrice = channel.unary_unary(
            "/santaka.AlertService/CheckPrice",
            request_serializer=santaka__pb2.PriceAlertRequest.SerializeToString,
            response_deserializer=santaka__pb2.AlertResponse.FromString,
        )
        self.CheckExpiration = channel.unary_unary(
            "/santaka.AlertService/CheckExpiration",
            request_serializer=santaka__pb2.ExpirationAlertRequest.SerializeToString,
            response_deserializer=santaka__pb2.AlertResponse.FromString,
        )


class AlertServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CheckExpiration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AlertServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CheckPrice": grpc.unary_unary_rpc_method_handler(
            servicer.CheckPrice,
            request_deserializer=santaka__pb2.PriceAlertRequest.FromString,
            response_serializer=santaka__pb2.AlertResponse.SerializeToString,
        ),
        "CheckExpiration": grpc.unary_unary_rpc_method_handler(
            servicer.CheckExpiration,
            request_deserializer=santaka__pb2.ExpirationAlertRequest.FromString,
            response_serializer=santaka__pb2.AlertResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "santaka.AlertService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AlertService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckPrice(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/santaka.AlertService/CheckPrice",
            santaka__pb2.PriceAlertRequest.SerializeToString,
            santaka__pb2.AlertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CheckExpiration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/santaka.AlertService/CheckExpiration",
            santaka__pb2.ExpirationAlertRequest.SerializeToString,
            santaka__pb2.AlertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class CouponYieldServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateCouponYield = channel.unary_unary(
            "/santaka.CouponYieldService/CalculateCouponYield",
            request_serializer=santaka__pb2.CouponYieldRequest.SerializeToString,
            response_deserializer=santaka__pb2.CouponYieldResponse.FromString,
        )


class CouponYieldServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CalculateCouponYield(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CouponYieldServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CalculateCouponYield": grpc.unary_unary_rpc_method_handler(
            servicer.CalculateCouponYield,
            request_deserializer=santaka__pb2.CouponYieldRequest.FromString,
            response_serializer=santaka__pb2.CouponYieldResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "santaka.CouponYieldService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CouponYieldService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CalculateCouponYield(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/santaka.CouponYieldService/CalculateCouponYield",
            santaka__pb2.CouponYieldRequest.SerializeToString,
            santaka__pb2.CouponYieldResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class FiscalPriceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateStockFiscalPrice = channel.unary_unary(
            "/santaka.FiscalPriceService/CalculateStockFiscalPrice",
            request_serializer=santaka__pb2.StockFiscalPriceRequest.SerializeToString,
            response_deserializer=santaka__pb2.FiscalPriceResponse.FromString,
        )
        self.CalculateBondFiscalPrice = channel.unary_unary(
            "/santaka.FiscalPriceService/CalculateBondFiscalPrice",
            request_serializer=santaka__pb2.BondFiscalPriceRequest.SerializeToString,
            response_deserializer=santaka__pb2.FiscalPriceResponse.FromString,
        )


class FiscalPriceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CalculateStockFiscalPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CalculateBondFiscalPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_FiscalPriceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CalculateStockFiscalPrice": grpc.unary_unary_rpc_method_handler(
            servicer.CalculateStockFiscalPrice,
            request_deserializer=santaka__pb2.StockFiscalPriceRequest.FromString,
            response_serializer=santaka__pb2.FiscalPriceResponse.SerializeToString,
        ),
        "CalculateBondFiscalPrice": grpc.unary_unary_rpc_method_handler(
            servicer.CalculateBondFiscalPrice,
            request_deserializer=santaka__pb2.BondFiscalPriceRequest.FromString,
            response_serializer=santaka__pb2.FiscalPriceResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "santaka.FiscalPriceService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class FiscalPriceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CalculateStockFiscalPrice(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/santaka.FiscalPriceService/CalculateStockFiscalPrice",
            santaka__pb2.StockFiscalPriceRequest.SerializeToString,
            santaka__pb2.FiscalPriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CalculateBondFiscalPrice(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/santaka.FiscalPriceService/CalculateBondFiscalPrice",
            santaka__pb2.BondFiscalPriceRequest.SerializeToString,
            santaka__pb2.FiscalPriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
